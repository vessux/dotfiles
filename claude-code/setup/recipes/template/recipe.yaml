# Recipe Template - Copy this to create new recipes
# This template shows all available options and step types

recipe:
  name: "Recipe Name"          # Required: display name
  description: "What this recipe does"  # Required: brief description

# Optional prerequisites - check before running recipe
prerequisites:
  # Check if command exists
  - type: "command"
    check: "git --version"
    message: "Git is required for this recipe"
  
  # Check if file/directory exists
  - type: "file"
    path: "${project_root}/package.json"
    message: "This recipe requires a Node.js project"
  
  # Check environment variable
  - type: "env"
    var: "EDITOR"
    message: "EDITOR environment variable must be set"

# Variables to collect from user
variables:
  # Simple text prompt
  project_name:
    prompt: "What is your project name?"
    default: "my-project"
  
  # Single choice selection
  install_location:
    prompt: "Where should this be installed?"
    type: "choice"
    choices:
      - label: "User config (~/.config/)"
        value: "${home}/.config"
      - label: "Project config (./.config/)"
        value: "${project_root}/.config"
    default: "${home}/.config"
  
  # Multiple choice selection
  features:
    prompt: "Which features to enable?"
    type: "multi_choice"
    choices:
      - id: "feature1"
        label: "Feature One"
        default: true
      - id: "feature2"
        label: "Feature Two"
        default: false
  
  # Dynamic choices from file
  dynamic_features:
    prompt: "Select from catalog:"
    type: "multi_choice"
    choices_from:
      file: "${recipe_dir}/feature-catalog.yaml"
      path: "features"
      id_field: "id"
      label_field: "name"
      description_field: "description"
      defaults: ["core", "recommended"]
  
  # Conditional variable (only asked if condition met)
  api_key:
    prompt: "Enter API key:"
    condition: "${features.includes('feature1')}"
    default: ""

# Setup steps - executed in order
steps:
  # Check if file exists
  - name: "Check existing configuration"
    type: "check_file"
    config:
      path: "${install_location}/config.json"
      if_exists: "ask_backup"  # Options: ask_backup, overwrite, skip, fail
  
  # Create directory if needed
  - name: "Create config directory"
    type: "ensure_directory"
    config:
      path: "${install_location}"
      mode: "755"  # Optional: directory permissions
  
  # Copy template file with variable substitution
  - name: "Install configuration template"
    type: "copy_template"
    config:
      source: "${recipe_dir}/templates/config.json.dist"
      target: "${install_location}/config.json"
      backup: true
      executable: false  # Optional: make file executable
      transform:
        - expand_vars    # Replace ${variables}
        - format_json    # Pretty-format JSON
  
  # Example: Using helper script for complex processing
  - name: "Process configuration with helper"
    type: "run_command"
    config:
      command: "${recipe_dir}/helpers/process-config.sh"
      args: ["${install_location}/config.json", "${project_name}"]
      working_dir: "${recipe_dir}"
      if_failed: "continue"  # Options: continue, fail, retry
  
  # Set computed variable for later steps
  - name: "Determine hook path"
    type: "set_variable"
    config:
      name: "hook_path"
      value_map:
        "${home}/.config": "${home}/.config/claude/hooks/my-hook.sh"
        "${project_root}/.config": "${project_root}/.claude/hooks/my-hook.sh"
      # Or use formula: value: "${install_location}/hooks/my-hook.sh"
  
  # Create file with inline content
  - name: "Generate startup script"
    type: "create_file"
    config:
      path: "${hook_path}"
      executable: true
      content: |
        #!/bin/bash
        # Generated by ${recipe.name}
        # Project: ${project_name}
        
        echo "Hook running for ${project_name}"
        ${features.feature1 ? 'echo "Feature 1 enabled"' : ''}
  
  # Display message to user
  - name: "Show configuration guide"
    type: "show_message"
    config:
      content: |
        Configuration installed at: ${install_location}
        
        Next steps:
        1. Review the configuration file
        2. Customize as needed
        3. Test the setup
  
  # Configure Claude Code hook
  - name: "Register as Claude Code hook"
    type: "configure_hook"
    config:
      hook_type: "pre-command"  # pre-command, post-command, etc.
      script: "${hook_path}"
      scope: "${install_location}"  # project or global
  
  # Run shell command
  - name: "Initialize project"
    type: "run_command"
    config:
      command: "npm init -y"
      working_dir: "${project_root}"
      if_failed: "continue"  # Options: continue, fail, retry
  
  # Conditional step
  - name: "Setup API integration"
    type: "create_file"
    condition: "${api_key != ''}"
    config:
      path: "${project_root}/.env"
      content: |
        API_KEY=${api_key}
        PROJECT_NAME=${project_name}

# Post-setup actions and messages
post_setup:
  message: |
    âœ… ${recipe.name} setup complete!
    
    Installed files:
    - Configuration: ${install_location}/config.json
    - Hook: ${hook_path}
    
    Variables used:
    - Project: ${project_name}
    - Location: ${install_location}
    
    Next steps:
    1. Review generated files
    2. Test the configuration
    3. Customize as needed
  
  # Optional: commands to run after setup
  actions:
    - label: "View configuration"
      command: "cat ${install_location}/config.json"
    - label: "Edit configuration"
      command: "${EDITOR} ${install_location}/config.json"

# Variable substitution patterns:
# ${var}                    - Simple variable
# ${dirname:path}           - Directory name of path
# ${basename:path}          - Base name of path
# ${condition ? 'yes' : 'no'} - Ternary operator

# Built-in path variables (use these instead of hardcoded paths):
# ${setup_dir}              - Claude Code setup directory (resolved by /setup command)
#                            Contains menu.yaml and recipes/ subdirectory
# ${recipe_dir}             - Current recipe directory (${setup_dir}/recipes/{recipe_id})
#                            Contains recipe.yaml and all recipe assets
# ${project_root}           - Current working directory
# ${home}                   - User home directory (~)
# ${date}                   - Current date
# ${recipe.name}            - Recipe metadata

# Common path patterns:
# User configs:             ${home}/.config/app/
# Project configs:          ${project_root}/.config/
# Claude user config:       ${home}/.config/claude/
# Claude project config:    ${project_root}/.claude/
# User hooks:               ${home}/.config/claude/hooks/
# Project hooks:            ${project_root}/.claude/hooks/
# Temporary files:          ${home}/.cache/app/
# Data files:               ${home}/.local/share/app/

# Recipe extensibility patterns:
# Helper scripts:           ${recipe_dir}/helpers/script.sh
# Static templates:         ${recipe_dir}/templates/file.dist
# Data files:               ${recipe_dir}/assets/data.yaml
# Recipe-specific configs:  ${recipe_dir}/config.yaml
